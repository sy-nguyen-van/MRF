function read_gmsh()
%
% This function reads a mesh in Matlab format generated using Gmsh and
% stores the node coordinates and element connectivity in the global FE
% structure. 
%
% The name of the Matlab .m file (which must include extension) should be
% previously stored in FE.mesh_input.gmsh_filename.
%
% This function has been tested with Gmsh v. 4.0.7.  Gmsh is distributed
% under the terms of the GNU General Public License (GPL), and can be
% downloaded from
%
% gmsh.info
%

% *** Do not modify this code unless necessary **

global FE

run(FE.mesh_input.gmsh_filename);

% Note we assume the Matlab file generated by Gmsh creates a structure
% named msh, and that this structure is available in the workspace for our
% code to then grab.

% If HEXAS elements are not present, then assume the mesh is 2D (in that
% case, the field msh.QUADS must exist!
if ~isfield(msh,'HEXAS')
    FE.dim = 2;
    el_array = msh.QUADS;
else
    FE.dim = 3;
    el_array = msh.HEXAS;
end

% at this point, there is no garuntee that the element nodes are in the
% correct order for this code. We assume that the ordering of nodes yields
% a positive determinant, so we must now ensure that this is the case.

nodes_per_elem = 2^FE.dim;
   coords = msh.POS(:, 1:FE.dim).';
   elem_node = el_array(:, 1:nodes_per_elem).';
   
   e_coord = reshape(coords(:,elem_node),[FE.dim,size(elem_node)]);
if FE.dim == 2
    % ensure that elemnt nodes 1,2,3 are in ccw order:
    homogenous_coord_123 = ones([3,3,size(e_coord,3)]);
    homogenous_coord_123(1:FE.dim,1:(FE.dim+1),:) = e_coord(1:FE.dim,1:(FE.dim+1),:);
    cw = find(dot(cross(homogenous_coord_123(:,1,:),homogenous_coord_123(:,2,:)),homogenous_coord_123(:,3,:)) < 0);
    % swap nodes 2 and 4 of the cw elements
    elem_node([2,4],cw) = elem_node([4,2],cw);
else 
    warning('Not yet verified that the element nodes are in the canonical order')
end

% Populate appropriate fields in FE structure
FE.n_node = msh.nbNod;
FE.n_elem = size(el_array, 1);
FE.coords = coords;
FE.elem_node =elem_node;


